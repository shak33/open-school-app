/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FindSchoolsSearchRequestDto } from '../models';
// @ts-ignore
import type { SchoolsSearchResultDto } from '../models';
// @ts-ignore
import type { SortBySchoolSearchColumnDto } from '../models';
// @ts-ignore
import type { SortDirectionDto } from '../models';
/**
 * SchoolsSearchApi - axios parameter creator
 * @export
 */
export const SchoolsSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get schools search
         * @param {string} pageSize 
         * @param {string} page 
         * @param {FindSchoolsSearchRequestDto} findSchoolsSearchRequestDto Find schools request
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SortBySchoolSearchColumnDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolsSearch: async (pageSize: string, page: string, findSchoolsSearchRequestDto: FindSchoolsSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolSearchColumnDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getSchoolsSearch', 'pageSize', pageSize)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getSchoolsSearch', 'page', page)
            // verify required parameter 'findSchoolsSearchRequestDto' is not null or undefined
            assertParamExists('getSchoolsSearch', 'findSchoolsSearchRequestDto', findSchoolsSearchRequestDto)
            const localVarPath = `/api/v1/schools/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findSchoolsSearchRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolsSearchApi - functional programming interface
 * @export
 */
export const SchoolsSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolsSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get schools search
         * @param {string} pageSize 
         * @param {string} page 
         * @param {FindSchoolsSearchRequestDto} findSchoolsSearchRequestDto Find schools request
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SortBySchoolSearchColumnDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolsSearch(pageSize: string, page: string, findSchoolsSearchRequestDto: FindSchoolsSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolSearchColumnDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolsSearchResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolsSearch(pageSize, page, findSchoolsSearchRequestDto, sortOrder, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsSearchApi.getSchoolsSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchoolsSearchApi - factory interface
 * @export
 */
export const SchoolsSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolsSearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Get schools search
         * @param {string} pageSize 
         * @param {string} page 
         * @param {FindSchoolsSearchRequestDto} findSchoolsSearchRequestDto Find schools request
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SortBySchoolSearchColumnDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolsSearch(pageSize: string, page: string, findSchoolsSearchRequestDto: FindSchoolsSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolSearchColumnDto, options?: any): AxiosPromise<SchoolsSearchResultDto> {
            return localVarFp.getSchoolsSearch(pageSize, page, findSchoolsSearchRequestDto, sortOrder, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolsSearchApi - interface
 * @export
 * @interface SchoolsSearchApi
 */
export interface SchoolsSearchApiInterface {
    /**
     * 
     * @summary Get schools search
     * @param {string} pageSize 
     * @param {string} page 
     * @param {FindSchoolsSearchRequestDto} findSchoolsSearchRequestDto Find schools request
     * @param {SortDirectionDto} [sortOrder] 
     * @param {SortBySchoolSearchColumnDto} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsSearchApiInterface
     */
    getSchoolsSearch(pageSize: string, page: string, findSchoolsSearchRequestDto: FindSchoolsSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolSearchColumnDto, options?: RawAxiosRequestConfig): AxiosPromise<SchoolsSearchResultDto>;

}

/**
 * SchoolsSearchApi - object-oriented interface
 * @export
 * @class SchoolsSearchApi
 * @extends {BaseAPI}
 */
export class SchoolsSearchApi extends BaseAPI implements SchoolsSearchApiInterface {
    /**
     * 
     * @summary Get schools search
     * @param {string} pageSize 
     * @param {string} page 
     * @param {FindSchoolsSearchRequestDto} findSchoolsSearchRequestDto Find schools request
     * @param {SortDirectionDto} [sortOrder] 
     * @param {SortBySchoolSearchColumnDto} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsSearchApi
     */
    public getSchoolsSearch(pageSize: string, page: string, findSchoolsSearchRequestDto: FindSchoolsSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolSearchColumnDto, options?: RawAxiosRequestConfig) {
        return SchoolsSearchApiFp(this.configuration).getSchoolsSearch(pageSize, page, findSchoolsSearchRequestDto, sortOrder, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

