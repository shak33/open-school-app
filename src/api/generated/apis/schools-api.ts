/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetSchoolsResponseDto } from '../models';
// @ts-ignore
import type { SchoolsSearchSortByDto } from '../models';
// @ts-ignore
import type { SortDirectionDto } from '../models';
/**
 * SchoolsApi - axios parameter creator
 * @export
 */
export const SchoolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get schools
         * @param {number} pageSize 
         * @param {number} page 
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SchoolsSearchSortByDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchools: async (pageSize: number, page: number, sortOrder?: SortDirectionDto, sortBy?: SchoolsSearchSortByDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getSchools', 'pageSize', pageSize)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getSchools', 'page', page)
            const localVarPath = `/api/v1/schools/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolsApi - functional programming interface
 * @export
 */
export const SchoolsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get schools
         * @param {number} pageSize 
         * @param {number} page 
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SchoolsSearchSortByDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchools(pageSize: number, page: number, sortOrder?: SortDirectionDto, sortBy?: SchoolsSearchSortByDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSchoolsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchools(pageSize, page, sortOrder, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolsApi.getSchools']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchoolsApi - factory interface
 * @export
 */
export const SchoolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get schools
         * @param {number} pageSize 
         * @param {number} page 
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SchoolsSearchSortByDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchools(pageSize: number, page: number, sortOrder?: SortDirectionDto, sortBy?: SchoolsSearchSortByDto, options?: any): AxiosPromise<GetSchoolsResponseDto> {
            return localVarFp.getSchools(pageSize, page, sortOrder, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolsApi - interface
 * @export
 * @interface SchoolsApi
 */
export interface SchoolsApiInterface {
    /**
     * 
     * @summary Get schools
     * @param {number} pageSize 
     * @param {number} page 
     * @param {SortDirectionDto} [sortOrder] 
     * @param {SchoolsSearchSortByDto} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApiInterface
     */
    getSchools(pageSize: number, page: number, sortOrder?: SortDirectionDto, sortBy?: SchoolsSearchSortByDto, options?: RawAxiosRequestConfig): AxiosPromise<GetSchoolsResponseDto>;

}

/**
 * SchoolsApi - object-oriented interface
 * @export
 * @class SchoolsApi
 * @extends {BaseAPI}
 */
export class SchoolsApi extends BaseAPI implements SchoolsApiInterface {
    /**
     * 
     * @summary Get schools
     * @param {number} pageSize 
     * @param {number} page 
     * @param {SortDirectionDto} [sortOrder] 
     * @param {SchoolsSearchSortByDto} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolsApi
     */
    public getSchools(pageSize: number, page: number, sortOrder?: SortDirectionDto, sortBy?: SchoolsSearchSortByDto, options?: RawAxiosRequestConfig) {
        return SchoolsApiFp(this.configuration).getSchools(pageSize, page, sortOrder, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

