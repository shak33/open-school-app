/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateSchoolClassRequestDto } from '../models';
// @ts-ignore
import type { CreateSchoolClassResponseDto } from '../models';
// @ts-ignore
import type { GetSchoolClassResponseDto } from '../models';
/**
 * SchoolClassApi - axios parameter creator
 * @export
 */
export const SchoolClassApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create school class
         * @param {string} schoolId School id
         * @param {CreateSchoolClassRequestDto} [createSchoolClassRequestDto] Create school class request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchoolClass: async (schoolId: string, createSchoolClassRequestDto?: CreateSchoolClassRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('createSchoolClass', 'schoolId', schoolId)
            const localVarPath = `/api/v1/schools/{schoolId}/class/create`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSchoolClassRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get school class
         * @param {string} schoolId School id
         * @param {string} schoolClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolClass: async (schoolId: string, schoolClassId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('getSchoolClass', 'schoolId', schoolId)
            // verify required parameter 'schoolClassId' is not null or undefined
            assertParamExists('getSchoolClass', 'schoolClassId', schoolClassId)
            const localVarPath = `/api/v1/schools/{schoolId}/{schoolClassId}`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (schoolClassId !== undefined) {
                localVarQueryParameter['schoolClassId'] = schoolClassId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolClassApi - functional programming interface
 * @export
 */
export const SchoolClassApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolClassApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create school class
         * @param {string} schoolId School id
         * @param {CreateSchoolClassRequestDto} [createSchoolClassRequestDto] Create school class request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSchoolClass(schoolId: string, createSchoolClassRequestDto?: CreateSchoolClassRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSchoolClassResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSchoolClass(schoolId, createSchoolClassRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolClassApi.createSchoolClass']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get school class
         * @param {string} schoolId School id
         * @param {string} schoolClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolClass(schoolId: string, schoolClassId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSchoolClassResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolClass(schoolId, schoolClassId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolClassApi.getSchoolClass']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchoolClassApi - factory interface
 * @export
 */
export const SchoolClassApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolClassApiFp(configuration)
    return {
        /**
         * 
         * @summary Create school class
         * @param {string} schoolId School id
         * @param {CreateSchoolClassRequestDto} [createSchoolClassRequestDto] Create school class request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchoolClass(schoolId: string, createSchoolClassRequestDto?: CreateSchoolClassRequestDto, options?: any): AxiosPromise<CreateSchoolClassResponseDto> {
            return localVarFp.createSchoolClass(schoolId, createSchoolClassRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get school class
         * @param {string} schoolId School id
         * @param {string} schoolClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolClass(schoolId: string, schoolClassId: string, options?: any): AxiosPromise<GetSchoolClassResponseDto> {
            return localVarFp.getSchoolClass(schoolId, schoolClassId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolClassApi - interface
 * @export
 * @interface SchoolClassApi
 */
export interface SchoolClassApiInterface {
    /**
     * 
     * @summary Create school class
     * @param {string} schoolId School id
     * @param {CreateSchoolClassRequestDto} [createSchoolClassRequestDto] Create school class request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolClassApiInterface
     */
    createSchoolClass(schoolId: string, createSchoolClassRequestDto?: CreateSchoolClassRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CreateSchoolClassResponseDto>;

    /**
     * 
     * @summary Get school class
     * @param {string} schoolId School id
     * @param {string} schoolClassId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolClassApiInterface
     */
    getSchoolClass(schoolId: string, schoolClassId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetSchoolClassResponseDto>;

}

/**
 * SchoolClassApi - object-oriented interface
 * @export
 * @class SchoolClassApi
 * @extends {BaseAPI}
 */
export class SchoolClassApi extends BaseAPI implements SchoolClassApiInterface {
    /**
     * 
     * @summary Create school class
     * @param {string} schoolId School id
     * @param {CreateSchoolClassRequestDto} [createSchoolClassRequestDto] Create school class request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolClassApi
     */
    public createSchoolClass(schoolId: string, createSchoolClassRequestDto?: CreateSchoolClassRequestDto, options?: RawAxiosRequestConfig) {
        return SchoolClassApiFp(this.configuration).createSchoolClass(schoolId, createSchoolClassRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get school class
     * @param {string} schoolId School id
     * @param {string} schoolClassId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolClassApi
     */
    public getSchoolClass(schoolId: string, schoolClassId: string, options?: RawAxiosRequestConfig) {
        return SchoolClassApiFp(this.configuration).getSchoolClass(schoolId, schoolClassId, options).then((request) => request(this.axios, this.basePath));
    }
}

