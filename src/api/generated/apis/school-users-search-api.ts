/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FindSchoolUsersSearchRequestDto } from '../models';
// @ts-ignore
import type { SchoolUsersSearchResultDto } from '../models';
// @ts-ignore
import type { SortBySchoolUsersSearchColumnDto } from '../models';
// @ts-ignore
import type { SortDirectionDto } from '../models';
/**
 * SchoolUsersSearchApi - axios parameter creator
 * @export
 */
export const SchoolUsersSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get school\'s users search
         * @param {string} pageSize 
         * @param {string} page 
         * @param {string} schoolId School id
         * @param {FindSchoolUsersSearchRequestDto} findSchoolUsersSearchRequestDto Find school users request
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SortBySchoolUsersSearchColumnDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolUsersSearch: async (pageSize: string, page: string, schoolId: string, findSchoolUsersSearchRequestDto: FindSchoolUsersSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolUsersSearchColumnDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getSchoolUsersSearch', 'pageSize', pageSize)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getSchoolUsersSearch', 'page', page)
            // verify required parameter 'schoolId' is not null or undefined
            assertParamExists('getSchoolUsersSearch', 'schoolId', schoolId)
            // verify required parameter 'findSchoolUsersSearchRequestDto' is not null or undefined
            assertParamExists('getSchoolUsersSearch', 'findSchoolUsersSearchRequestDto', findSchoolUsersSearchRequestDto)
            const localVarPath = `/api/v1/schools/{schoolId}/users/list`
                .replace(`{${"schoolId"}}`, encodeURIComponent(String(schoolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findSchoolUsersSearchRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolUsersSearchApi - functional programming interface
 * @export
 */
export const SchoolUsersSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchoolUsersSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get school\'s users search
         * @param {string} pageSize 
         * @param {string} page 
         * @param {string} schoolId School id
         * @param {FindSchoolUsersSearchRequestDto} findSchoolUsersSearchRequestDto Find school users request
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SortBySchoolUsersSearchColumnDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolUsersSearch(pageSize: string, page: string, schoolId: string, findSchoolUsersSearchRequestDto: FindSchoolUsersSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolUsersSearchColumnDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolUsersSearchResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolUsersSearch(pageSize, page, schoolId, findSchoolUsersSearchRequestDto, sortOrder, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SchoolUsersSearchApi.getSchoolUsersSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SchoolUsersSearchApi - factory interface
 * @export
 */
export const SchoolUsersSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchoolUsersSearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Get school\'s users search
         * @param {string} pageSize 
         * @param {string} page 
         * @param {string} schoolId School id
         * @param {FindSchoolUsersSearchRequestDto} findSchoolUsersSearchRequestDto Find school users request
         * @param {SortDirectionDto} [sortOrder] 
         * @param {SortBySchoolUsersSearchColumnDto} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolUsersSearch(pageSize: string, page: string, schoolId: string, findSchoolUsersSearchRequestDto: FindSchoolUsersSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolUsersSearchColumnDto, options?: any): AxiosPromise<SchoolUsersSearchResultDto> {
            return localVarFp.getSchoolUsersSearch(pageSize, page, schoolId, findSchoolUsersSearchRequestDto, sortOrder, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchoolUsersSearchApi - interface
 * @export
 * @interface SchoolUsersSearchApi
 */
export interface SchoolUsersSearchApiInterface {
    /**
     * 
     * @summary Get school\'s users search
     * @param {string} pageSize 
     * @param {string} page 
     * @param {string} schoolId School id
     * @param {FindSchoolUsersSearchRequestDto} findSchoolUsersSearchRequestDto Find school users request
     * @param {SortDirectionDto} [sortOrder] 
     * @param {SortBySchoolUsersSearchColumnDto} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolUsersSearchApiInterface
     */
    getSchoolUsersSearch(pageSize: string, page: string, schoolId: string, findSchoolUsersSearchRequestDto: FindSchoolUsersSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolUsersSearchColumnDto, options?: RawAxiosRequestConfig): AxiosPromise<SchoolUsersSearchResultDto>;

}

/**
 * SchoolUsersSearchApi - object-oriented interface
 * @export
 * @class SchoolUsersSearchApi
 * @extends {BaseAPI}
 */
export class SchoolUsersSearchApi extends BaseAPI implements SchoolUsersSearchApiInterface {
    /**
     * 
     * @summary Get school\'s users search
     * @param {string} pageSize 
     * @param {string} page 
     * @param {string} schoolId School id
     * @param {FindSchoolUsersSearchRequestDto} findSchoolUsersSearchRequestDto Find school users request
     * @param {SortDirectionDto} [sortOrder] 
     * @param {SortBySchoolUsersSearchColumnDto} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolUsersSearchApi
     */
    public getSchoolUsersSearch(pageSize: string, page: string, schoolId: string, findSchoolUsersSearchRequestDto: FindSchoolUsersSearchRequestDto, sortOrder?: SortDirectionDto, sortBy?: SortBySchoolUsersSearchColumnDto, options?: RawAxiosRequestConfig) {
        return SchoolUsersSearchApiFp(this.configuration).getSchoolUsersSearch(pageSize, page, schoolId, findSchoolUsersSearchRequestDto, sortOrder, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

